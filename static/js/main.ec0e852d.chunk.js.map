{"version":3,"sources":["api/API.ts","utils/error-utils.ts","features/Login/authReducer.ts","app/appReducer.ts","features/Todolists/todolistReducer.ts","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","features/Todolists/tasksReducer.ts","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/TodoList.tsx","features/Todolists/TotolistsList.tsx","Components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/Login.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","tasksAPI","todolistId","get","title","post","taskId","delete","model","put","todolistAPI","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedIn","value","type","status","isInitialized","id","addedDate","order","filter","entityStatus","changeTodolistEntityStatusAC","AddItemForm","React","memo","addItem","disabled","useState","setError","setTitle","addItemHandler","trim","TextField","onChange","e","currentTarget","onKeyPress","key","label","helperText","variant","className","IconButton","size","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","New","todoListId","description","startDate","deadline","priority","Low","Completed","changeTaskEntityStatusAC","updateTask","domainModel","getState","task","tasks","find","t","apiModel","then","res","resultCode","action","updateTaskAC","catch","console","warn","Task","useDispatch","removeTask","useCallback","removeTaskAC","removeTaskTC","onChangeHandler","checked","changeTaskTitle","statusLoading","Checkbox","Delete","Todolist","props","isLogged","useSelector","state","auth","useEffect","setTasksAC","items","addTask","item","addTaskTC","changeTodoListTitle","newTitle","changeTitleAC","changeFilter","removeTodolist","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","allTodoLists","tasksForTodolist","map","todolist","Button","TodolistsList","todolists","todos","addTodoList","a","todo","Error","addTodolistsTC","Grid","container","style","padding","justify","alignItems","direction","marginRight","spacing","Paper","to","Alert","elevation","ErrorSnackBar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","err","resetForm","xs","handleSubmit","textAlign","marginTop","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","useStyles","makeStyles","theme","root","flexGrow","menuButton","App","classes","history","useHistory","handleLogout","AppBar","position","Toolbar","edge","aria-label","Typography","push","LinearProgress","Container","fixed","exact","path","render","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","forEach","tl","copyState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ec0e852d.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {RequestStatusType} from \"../app/appReducer\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a409a2ec-60ad-4ff6-9051-8f6025edc2fd'\r\n    }\r\n})\r\n\r\n// tasks API\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return  instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return  instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    deleteTask(taskId: string, todolistId: string) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return  instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n// todolist API\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return  instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return  instance.post<ResponseType<{item: TodolistType}>>(`todo-lists`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string, ) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return  instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\n// auth API\r\nexport const authAPI = {\r\n    login(data: ParamsLoginType) {\r\n        return instance.post<ResponseType<{userId: number}>>(`auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{}>>(`auth/login`)\r\n    },\r\n    auth() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>(`auth/me`)\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type ParamsLoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType= {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {ResponseType} from '../api/API'\r\nimport {setAppErrorAC, setAppStatusAC, SetErrorActionType, SetStatusActionType} from '../app/appReducer'\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetErrorActionType | SetStatusActionType>","import { Dispatch } from 'redux'\r\nimport { SetErrorActionType, setAppStatusAC, SetStatusActionType } from '../../app/appReducer'\r\nimport {authAPI, ParamsLoginType} from \"../../api/API\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch(action.type) {\r\n        case 'login/SET_IS_LOGGED_IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setIsLoggedIn = (value: boolean) => ({type: 'login/SET_IS_LOGGED_IN', value} as const)\r\n\r\nexport const loginTC = (data: ParamsLoginType) => (dispatch: ThunkType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n        if(res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsLoggedIn(true))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    }).catch(err => {\r\n        handleServerNetworkError(err, dispatch)\r\n    })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: ThunkType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setIsLoggedIn(false))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(err => {\r\n        handleServerNetworkError(err, dispatch)\r\n    })\r\n}\r\n\r\nexport type SetIsLoggedInType = ReturnType<typeof setIsLoggedIn>\r\n\r\ntype ThunkType = Dispatch<ActionsType | SetStatusActionType | SetErrorActionType>\r\ntype ActionsType = SetIsLoggedInType | SetErrorActionType | SetStatusActionType","import {authAPI} from \"../api/API\";\r\nimport {Dispatch} from \"redux\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {SetIsLoggedInType, setIsLoggedIn} from \"../features/Login/authReducer\";\r\n\r\nconst initialState = {\r\n    status: 'succeeded' as RequestStatusType,\r\n    error: null as ErrorMessageType,\r\n    isInitialized: false\r\n}\r\n\r\n\r\nexport const appReducer = (state: AppStateType = initialState, action: ActionsType): AppStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/IS_INITIALIZED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setIsInitialized = (value: boolean) => ({type: 'APP/IS_INITIALIZED', value} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: ThunkType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.auth()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsInitialized(true))\r\n                dispatch(setIsLoggedIn(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\n\r\n// types\r\n\r\nexport type ErrorMessageType = string | null\r\nexport type AppStateType = typeof initialState\r\nexport type SetErrorActionType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetStatusActionType = ReturnType<typeof setAppStatusAC>;\r\nexport type SetInitializedType = ReturnType<typeof setIsInitialized>;\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\ntype ActionsType = SetErrorActionType | SetStatusActionType | SetInitializedType | SetIsLoggedInType\r\ntype ThunkType = Dispatch<ActionsType | SetStatusActionType | SetErrorActionType>","import {todolistAPI} from \"../../api/API\";\r\nimport {TodolistType} from \"../../api/API\"\r\nimport {\r\n    RequestStatusType,\r\n    setAppStatusAC,\r\n    SetErrorActionType,\r\n    SetStatusActionType\r\n} from \"../../app/appReducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TodolistDomainType[] = [\r\n    {\r\n        id: '1',\r\n        addedDate: '',\r\n        order:0,\r\n        title: 'React',\r\n        filter: 'all',\r\n        entityStatus: \"idle\"\r\n    },\r\n    {\r\n        id: '2',\r\n        addedDate: '',\r\n        order:0,\r\n        title: 'React',\r\n        filter: 'all',\r\n        entityStatus: \"idle\"\r\n    },\r\n]\r\n\r\nexport const todolistReducer = (state: TodolistDomainType[] = initialState, action: ActionsType): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case \"SET-TODOS\":\r\n            return action.todos.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todo, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case \"CHANGE-FILTER\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case \"CHANGE-TITLE\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setTodolistsAC = (todos: Array<TodolistType>) => ({type: 'SET-TODOS', todos}) as const\r\nexport const addTodolistAC = (todo: TodolistType) => ({type: \"ADD-TODOLIST\", todo}) as const\r\nexport const removeTodolistAC = (todolistID: string) => ({type: \"REMOVE-TODOLIST\", id: todolistID}) as const // as const - фиксирует строку как константу.\r\nexport const changeFilterAC = (filter: FilterValuesType, id: string) => ({type: \"CHANGE-FILTER\", filter, id}) as const\r\nexport const changeTitleAC = (id: string, title: string) => ({type: \"CHANGE-TITLE\", id, title}) as const\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus}) as const\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () =>\r\n    (dispatch: ThunkType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.getTodolist()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n\r\n    }\r\n\r\n\r\nexport const addTodolistsTC = (title: string) => async (dispatch: ThunkType) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        await todolistAPI.createTodolist(title)//let result =  await todolistAPI.createTodolist(title) возвращает\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = addTodolistAC(res.data.data.item)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    } catch (e) {\r\n        throw new Error(e)\r\n    }\r\n}\r\n\r\nexport const deleteTodolistsTC = (todolistId: string) =>\r\n    (dispatch: ThunkType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId,'loading'))\r\n        todolistAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if(res.data.resultCode === 0) {\r\n                    const action = removeTodolistAC(todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                }else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\nexport const updateTodolistTitleTC = (todolistId: string, title: string) =>\r\n    (dispatch: ThunkType) => {\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком\r\n// чтобы у неё отобрать остальные св-ва\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId,'loading'))\r\n        todolistAPI.updateTodolist(todolistId, title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = changeTitleAC(todolistId, title)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(changeTodolistEntityStatusAC(todolistId,'succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\n// types\r\ntype ThunkType = Dispatch<SetStatusActionType | SetErrorActionType | ActionsType>\r\n\r\nexport type AddTodolistType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeFilterAC>\r\n    | ReturnType<typeof changeTitleAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type PropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: PropsType) => {\r\n    let [error, setError] = useState<string | null>(null)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField value={title}\r\n                   disabled={disabled}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   label={title}\r\n                   helperText={error}\r\n                   variant='outlined'\r\n                   className=''\r\n        />\r\n        <IconButton size='small' color='primary' onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\nexport type PropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(({value, onChange, disabled = false}: PropsType) => {\r\n    const [editMode, setEditMode] = React.useState(false)\r\n    const [title, setTitle] = useState(value)\r\n\r\n    const activateEditMode = () => {\r\n        if(!disabled) {\r\n            setEditMode(true)\r\n            setTitle(value)\r\n        }\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(title)\r\n    }\r\n    const onChangeStatusHandler =(e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler =(e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            onChange(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField variant='outlined' value={title} onChange={onChangeStatusHandler} onKeyPress={onKeyPressHandler} autoFocus onBlur={activateViewMode}/>\r\n            :\r\n            <span onDoubleClick={activateEditMode}>{title}</span>\r\n    )\r\n})","import {TaskPriorities, tasksAPI, TaskStatuses, TaskType, UpdateTaskModelType} from \"../../api/API\";\r\nimport {AddTodolistType, RemoveTodolistType, SetTodolistsActionType} from \"./todolistReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC, SetErrorActionType, SetStatusActionType} from \"../../app/appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TaskStateType = {\r\n    \"1\": [\r\n        {\r\n            id: \"1\", title: \"CSS\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n        {\r\n            id: \"2\", title: \"JS\",\r\n            status: TaskStatuses.Completed, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n        {\r\n            id: \"3\", title: \"REACT\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n    ],\r\n    \"2\": [\r\n        {\r\n            id: \"1\", title: \"book\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n        {\r\n            id: \"2\", title: \"book2\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n        {\r\n            id: \"3\", title: \"book3\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n\r\n    ]\r\n}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case 'ADD_TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'REMOVE_TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'UPDATE_TASK':\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'CHANGE-TASK-ENTITY-STATUS':\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, entityStatus: action.entityStatus} : t)\r\n            }\r\n        case 'SET-TODOS':\r\n            const stateCopy = {...state}\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todo.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n}) as const\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD_TASK', task}) as const\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE_TASK', taskId, todolistId}) as const\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE_TASK', taskId, model, todolistId}) as const\r\nexport const changeTaskEntityStatusAC = (taskId: string, todolistId: string, entityStatus: RequestStatusType) =>\r\n    ({type: 'CHANGE-TASK-ENTITY-STATUS', taskId, todolistId, entityStatus}) as const\r\n\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) =>\r\n    (dispatch: ThunkType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        tasksAPI.getTasks(todolistId)\r\n            .then(res => {\r\n                const tasks = res.data.items\r\n                const action = setTasksAC(tasks, todolistId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) =>\r\n    (dispatch: ThunkType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'loading'))\r\n        tasksAPI.deleteTask(taskId, todolistId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = removeTaskAC(taskId, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) =>\r\n    (dispatch: ThunkType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        tasksAPI.createTask(todolistId, title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = addTaskAC(res.data.data.item)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n    }\r\n\r\n// универсальная санка, которая помимо taskId и todolistId принимает необходимое поле для изменения status|title\r\nexport const updateTask = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType) =>\r\n    (dispatch: ThunkType, getState: () => AppRootStateType) => {\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком\r\n// чтобы у неё отобрать остальные св-ва\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...domainModel// перезатираем только то свойство, которое было передано в domainModel\r\n        }\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'loading'))\r\n        tasksAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n    }\r\n\r\n// types\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n    | AddTodolistType\r\n    | SetTodolistsActionType\r\n    | RemoveTodolistType\r\n\r\nexport type ThunkType = Dispatch<ActionsType | SetStatusActionType | SetErrorActionType>\r\n// создаем тип, для универсальной санки с необязательными полями, для подстановки нужного поля в санку\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n    entityStatus?: RequestStatusType\r\n}","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../Components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport { removeTaskTC, updateTask} from \"../../tasksReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/API\";\r\n\r\nexport type PropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nconst Task = React.memo(({todolistId, task}: PropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback(() => {\r\n        dispatch(removeTaskTC(task.id, todolistId))\r\n    },[task.id,todolistId])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTask(task.id,  todolistId, {status}));\r\n    },[task.id,todolistId])\r\n    const changeTaskTitle = useCallback((title: string) => {\r\n        dispatch(updateTask(task.id, todolistId, {title}));\r\n    },[task.id,todolistId])\r\n\r\n    const statusLoading = task.entityStatus === 'loading'\r\n    return (\r\n        <div className={task.status === TaskStatuses.Completed ? \"task__wrapper is-done\" : \"task__wrapper\"}>\r\n            <Checkbox color='primary'\r\n                      onChange={onChangeHandler}\r\n                      checked={task.status === TaskStatuses.Completed}\r\n                      disabled={statusLoading}/>\r\n            <EditableSpan value={task.title} onChange={changeTaskTitle} disabled={statusLoading}/>\r\n            <IconButton onClick={removeTask} disabled={statusLoading}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Task","import React, {useCallback, useEffect} from 'react';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {AddItemForm} from \"../../../Components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../Components/EditableSpan/EditableSpan\";\r\nimport Task from \"./Task/Task\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTaskTC, fetchTasksTC} from \"../tasksReducer\";\r\nimport {\r\n    changeFilterAC,\r\n    deleteTodolistsTC,\r\n    FilterValuesType,\r\n    TodolistDomainType,\r\n    updateTodolistTitleTC\r\n} from \"../todolistReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/API\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    todolistId: string\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) =>  {\r\n    const isLogged = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(!isLogged) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(props.todolistId))\r\n    },[])//no dependencies. runs only once when the component will render\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskTC(title.trim(), props.todolistId))\r\n    },[dispatch]);\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n\r\n        dispatch(updateTodolistTitleTC(props.todolistId, newTitle))\r\n    },[dispatch, props.todolistId])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, taskId: string) => {\r\n        dispatch(changeFilterAC(value, taskId));\r\n    },[dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(deleteTodolistsTC(id))\r\n    },[])\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter(\"all\", props.todolistId)\r\n    },[]);\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter(\"active\", props.todolistId)\r\n    },[]);\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter(\"completed\", props.todolistId)\r\n    },[])\r\n\r\n\r\n    let allTodoLists = props.tasks;\r\n    let tasksForTodolist = allTodoLists\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const task =  tasksForTodolist.map(t => {\r\n        return <Task key={t.id}\r\n                     task={t}\r\n                     todolistId={props.todolistId}\r\n        />\r\n    })\r\n\r\n    const statusLoading = props.todolist.entityStatus === 'loading'\r\n\r\n    return <div>\r\n        <div className='title__wrapper'>\r\n            <EditableSpan value={props.title} onChange={changeTodoListTitle} disabled={statusLoading}/>\r\n            <IconButton onClick={() => removeTodolist(props.todolistId)} disabled={statusLoading}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n        <AddItemForm addItem={addTask} disabled={statusLoading}/>\r\n        <div>\r\n            {\r\n                task\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant='outlined' color={props.filter === 'all' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button variant='outlined' color={props.filter === 'active' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button variant='outlined' color={props.filter === 'completed' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {addTodolistsTC, fetchTodolistsTC, TodolistDomainType} from \"./todolistReducer\";\r\nimport {TaskStateType} from \"./tasksReducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../Components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/TodoList\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks);\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistsTC(title))\r\n    }, [])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}} justify=\"center\" alignItems=\"center\"\r\n              direction=\"column\">\r\n            <div style={{marginRight: '20px'}}>Add new task</div>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3} justify='space-around'>\r\n            {todolists.map(t => {\r\n                let allTodoLists = tasks[t.id];\r\n                return (\r\n                    <Grid key={t.id} item style={{padding: '20px'}}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist key={t.id}\r\n                                      todolist={t}\r\n                                      title={t.title}\r\n                                      tasks={allTodoLists}\r\n                                      filter={t.filter}\r\n                                      todolistId={t.id}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                )\r\n            })}\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {ErrorMessageType, setAppErrorAC} from \"../../app/appReducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function ErrorSnackBar() {\r\n    const error = useSelector<AppRootStateType, ErrorMessageType>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'password must be more than 3 character';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n    if(isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container\r\n                 justify=\"center\">\r\n            <Grid item xs={4} >\r\n            <form onSubmit={formik.handleSubmit} style={{textAlign: 'center', marginTop: \"50px\"}}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.scss';\r\nimport {\r\n    AppBar,\r\n    Button, CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    makeStyles,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {TodolistsList} from \"../features/Todolists/TotolistsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./appReducer\";\r\nimport ErrorSnackBar from \"../Components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {HashRouter, Redirect, Route, Switch, useHistory} from 'react-router-dom';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/Login/authReducer\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const classes = useStyles();\r\n    let history = useHistory();\r\n\r\n    const handleLogout = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    // if (!isInitialized) {\r\n    //     return <div\r\n    //         style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n    //         <CircularProgress/>\r\n    //     </div>\r\n    // }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackBar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        My TODO\r\n                    </Typography>\r\n                    {\r\n                        !isLoggedIn ?\r\n                            <Button color=\"inherit\" onClick={() => history.push('/login')}>Login</Button> :\r\n                            <Button color=\"inherit\" onClick={handleLogout}>Log out</Button>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color={\"primary\"}/>}\r\n            <Container fixed>\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                        <Route path={'/login'} render={() => <Login/>}/>\r\n                        <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                        <Redirect from={'*'} to={'/404'}/>\r\n                    </Switch>\r\n                </HashRouter>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {tasksReducer} from '../features/Todolists/tasksReducer';\r\nimport {todolistReducer} from '../features/Todolists/todolistReducer';\r\nimport {combineReducers, createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport {appReducer} from \"./appReducer\";\r\nimport {authReducer} from \"../features/Login/authReducer\";\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n//for redux-devtool\r\n// @ts-ignore\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\nexport const store = createStore(rootReducer,composeEnhancers(applyMiddleware(thunk)))\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент store.getSstate\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n        <Provider store={store} >\r\n            <App/>\r\n        </Provider>\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}