[{"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\reportWebVitals.ts":"1","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\api\\API.ts":"2","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\index.tsx":"3","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\Task.stories.tsx":"4","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\todolist-api.stories.tsx":"5","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\task-api.stories.tsx":"6","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\AddItemForm\\AddItemForm.tsx":"7","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\EditableSpan\\EditableSpan.tsx":"8","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\Todolist\\Task\\Task.tsx":"9","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\tasksReducer.ts":"10","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\Todolist\\TodoList.tsx":"11","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\App.tsx":"12","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\TotolistsList.tsx":"13","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\store.ts":"14","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\todolistReducer.ts":"15","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\EditableSpan.stories.tsx":"16","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\appReducer.ts":"17","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\ErrorSnackBar\\ErrorSnackBar.tsx":"18","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\utils\\error-utils.ts":"19","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Login\\Login.tsx":"20","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Login\\authReducer.ts":"21","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\AppWithRedux.stories.tsx":"22"},{"size":440,"mtime":1618586872932,"results":"23","hashOfConfig":"24"},{"size":3072,"mtime":1623356372702,"results":"25","hashOfConfig":"24"},{"size":617,"mtime":1624479299754,"results":"26","hashOfConfig":"24"},{"size":1782,"mtime":1620486481394,"results":"27","hashOfConfig":"24"},{"size":1742,"mtime":1619026692850,"results":"28","hashOfConfig":"24"},{"size":2122,"mtime":1623358569435,"results":"29","hashOfConfig":"24"},{"size":1553,"mtime":1620478482785,"results":"30","hashOfConfig":"24"},{"size":1268,"mtime":1620478482789,"results":"31","hashOfConfig":"24"},{"size":1791,"mtime":1623348358442,"results":"32","hashOfConfig":"24"},{"size":9616,"mtime":1624994329168,"results":"33","hashOfConfig":"24"},{"size":3941,"mtime":1624560462230,"results":"34","hashOfConfig":"24"},{"size":3223,"mtime":1624555130250,"results":"35","hashOfConfig":"24"},{"size":2261,"mtime":1624560577762,"results":"36","hashOfConfig":"24"},{"size":1384,"mtime":1624993229937,"results":"37","hashOfConfig":"24"},{"size":6285,"mtime":1624994414632,"results":"38","hashOfConfig":"24"},{"size":813,"mtime":1619286510610,"results":"39","hashOfConfig":"24"},{"size":3239,"mtime":1624994011967,"results":"40","hashOfConfig":"24"},{"size":1054,"mtime":1624993970464,"results":"41","hashOfConfig":"24"},{"size":667,"mtime":1624994519302,"results":"42","hashOfConfig":"24"},{"size":3653,"mtime":1624555200283,"results":"43","hashOfConfig":"24"},{"size":2680,"mtime":1624994094552,"results":"44","hashOfConfig":"24"},{"size":522,"mtime":1619286347052,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"14moyvu",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"51"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"51"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\reportWebVitals.ts",[],["96","97"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\api\\API.ts",[],["98","99"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\index.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\Task.stories.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\todolist-api.stories.tsx",["100"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\task-api.stories.tsx",["101"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\AddItemForm\\AddItemForm.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\EditableSpan\\EditableSpan.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\Todolist\\Task\\Task.tsx",["102","103","104"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\tasksReducer.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\Todolist\\TodoList.tsx",["105","106","107","108","109","110"],"import React, {useCallback, useEffect} from 'react';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {AddItemForm} from \"../../../Components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../Components/EditableSpan/EditableSpan\";\r\nimport Task from \"./Task/Task\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTaskTC, fetchTasksTC} from \"../tasksReducer\";\r\nimport {\r\n    changeFilterAC,\r\n    deleteTodolistsTC,\r\n    FilterValuesType,\r\n    TodolistDomainType,\r\n    updateTodolistTitleTC\r\n} from \"../todolistReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/API\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    todolistId: string\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) =>  {\r\n    const isLogged = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(!isLogged) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(props.todolistId))\r\n    },[])//no dependencies. runs only once when the component will render\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskTC(title.trim(), props.todolistId))\r\n    },[dispatch]);\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n\r\n        dispatch(updateTodolistTitleTC(props.todolistId, newTitle))\r\n    },[dispatch, props.todolistId])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, taskId: string) => {\r\n        dispatch(changeFilterAC(value, taskId));\r\n    },[dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(deleteTodolistsTC(id))\r\n    },[])\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter(\"all\", props.todolistId)\r\n    },[]);\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter(\"active\", props.todolistId)\r\n    },[]);\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter(\"completed\", props.todolistId)\r\n    },[])\r\n\r\n\r\n    let allTodoLists = props.tasks;\r\n    let tasksForTodolist = allTodoLists\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const task =  tasksForTodolist.map(t => {\r\n        return <Task key={t.id}\r\n                     task={t}\r\n                     todolistId={props.todolistId}\r\n        />\r\n    })\r\n\r\n    const statusLoading = props.todolist.entityStatus === 'loading'\r\n\r\n    return <div>\r\n        <div className='title__wrapper'>\r\n            <EditableSpan value={props.title} onChange={changeTodoListTitle} disabled={statusLoading}/>\r\n            <IconButton onClick={() => removeTodolist(props.todolistId)} disabled={statusLoading}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n        <AddItemForm addItem={addTask} disabled={statusLoading}/>\r\n        <div>\r\n            {\r\n                task\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant='outlined' color={props.filter === 'all' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button variant='outlined' color={props.filter === 'active' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button variant='outlined' color={props.filter === 'completed' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n",["111","112"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\App.tsx",["113","114","115","116"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\TotolistsList.tsx",["117","118"],"import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {addTodolistsTC, fetchTodolistsTC, TodolistDomainType} from \"./todolistReducer\";\r\nimport {TaskStateType} from \"./tasksReducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../Components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/TodoList\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks);\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistsTC(title))\r\n    }, [])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}} justify=\"center\" alignItems=\"center\"\r\n              direction=\"column\">\r\n            <div style={{marginRight: '20px'}}>Add new task</div>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3} justify='space-around'>\r\n            {todolists.map(t => {\r\n                let allTodoLists = tasks[t.id];\r\n                return (\r\n                    <Grid key={t.id} item style={{padding: '20px'}}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist key={t.id}\r\n                                      todolist={t}\r\n                                      title={t.title}\r\n                                      tasks={allTodoLists}\r\n                                      filter={t.filter}\r\n                                      todolistId={t.id}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                )\r\n            })}\r\n        </Grid>\r\n    </>\r\n}","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\store.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\todolistReducer.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\EditableSpan.stories.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\appReducer.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\ErrorSnackBar\\ErrorSnackBar.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\utils\\error-utils.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Login\\Login.tsx",["119"],"import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'password must be more than 3 character';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n    if(isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container\r\n                 justify=\"center\">\r\n            <Grid item xs={4} >\r\n            <form onSubmit={formik.handleSubmit} style={{textAlign: 'center', marginTop: \"50px\"}}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Login\\authReducer.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\AppWithRedux.stories.tsx",[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"120","replacedBy":"124"},{"ruleId":"122","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":4,"column":1,"nodeType":"128","endLine":6,"endColumn":2},{"ruleId":"126","severity":1,"message":"127","line":4,"column":1,"nodeType":"128","endLine":6,"endColumn":2},{"ruleId":"129","severity":1,"message":"130","line":19,"column":7,"nodeType":"131","endLine":19,"endColumn":27,"suggestions":"132"},{"ruleId":"129","severity":1,"message":"130","line":23,"column":7,"nodeType":"131","endLine":23,"endColumn":27,"suggestions":"133"},{"ruleId":"129","severity":1,"message":"130","line":26,"column":7,"nodeType":"131","endLine":26,"endColumn":27,"suggestions":"134"},{"ruleId":"129","severity":1,"message":"135","line":36,"column":7,"nodeType":"131","endLine":36,"endColumn":9,"suggestions":"136"},{"ruleId":"129","severity":1,"message":"137","line":40,"column":7,"nodeType":"131","endLine":40,"endColumn":17,"suggestions":"138"},{"ruleId":"129","severity":1,"message":"130","line":52,"column":7,"nodeType":"131","endLine":52,"endColumn":9,"suggestions":"139"},{"ruleId":"129","severity":1,"message":"140","line":56,"column":7,"nodeType":"131","endLine":56,"endColumn":9,"suggestions":"141"},{"ruleId":"129","severity":1,"message":"140","line":59,"column":7,"nodeType":"131","endLine":59,"endColumn":9,"suggestions":"142"},{"ruleId":"129","severity":1,"message":"140","line":62,"column":7,"nodeType":"131","endLine":62,"endColumn":9,"suggestions":"143"},{"ruleId":"120","replacedBy":"144"},{"ruleId":"122","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":5,"column":13,"nodeType":"148","messageId":"149","endLine":5,"endColumn":29},{"ruleId":"146","severity":1,"message":"150","line":38,"column":11,"nodeType":"148","messageId":"149","endLine":38,"endColumn":24},{"ruleId":"129","severity":1,"message":"130","line":45,"column":8,"nodeType":"131","endLine":45,"endColumn":10,"suggestions":"151"},{"ruleId":"129","severity":1,"message":"152","line":49,"column":8,"nodeType":"131","endLine":49,"endColumn":10,"suggestions":"153"},{"ruleId":"129","severity":1,"message":"154","line":22,"column":8,"nodeType":"131","endLine":22,"endColumn":10,"suggestions":"155"},{"ruleId":"129","severity":1,"message":"130","line":26,"column":8,"nodeType":"131","endLine":26,"endColumn":10,"suggestions":"156"},{"ruleId":"157","severity":1,"message":"158","line":55,"column":32,"nodeType":"159","endLine":55,"endColumn":49},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],["160"],["161"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["162"],["163"],["164"],"React Hook useEffect has missing dependencies: 'dispatch', 'isLogged', and 'props.todolistId'. Either include them or remove the dependency array.",["165"],"React Hook useCallback has a missing dependency: 'props.todolistId'. Either include it or remove the dependency array.",["166"],["167"],"React Hook useCallback has missing dependencies: 'changeFilter' and 'props.todolistId'. Either include them or remove the dependency array.",["168"],["169"],["170"],["160"],["161"],"@typescript-eslint/no-unused-vars","'CircularProgress' is defined but never used.","Identifier","unusedVar","'isInitialized' is assigned a value but never used.",["171"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["172"],"React Hook useEffect has missing dependencies: 'dispatch' and 'isLoggedIn'. Either include them or remove the dependency array.",["173"],["174"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"175","fix":"176"},{"desc":"175","fix":"177"},{"desc":"175","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"185","fix":"187"},{"desc":"185","fix":"188"},{"desc":"183","fix":"189"},{"desc":"183","fix":"190"},{"desc":"191","fix":"192"},{"desc":"183","fix":"193"},"Update the dependencies array to be: [dispatch, task.id, todolistId]",{"range":"194","text":"195"},{"range":"196","text":"195"},{"range":"197","text":"195"},"Update the dependencies array to be: [dispatch, isLogged, props.todolistId]",{"range":"198","text":"199"},"Update the dependencies array to be: [dispatch, props.todolistId]",{"range":"200","text":"201"},"Update the dependencies array to be: [dispatch]",{"range":"202","text":"203"},"Update the dependencies array to be: [changeFilter, props.todolistId]",{"range":"204","text":"205"},{"range":"206","text":"205"},{"range":"207","text":"205"},{"range":"208","text":"203"},{"range":"209","text":"203"},"Update the dependencies array to be: [dispatch, isLoggedIn]",{"range":"210","text":"211"},{"range":"212","text":"203"},[683,703],"[dispatch, task.id, todolistId]",[946,966],[1098,1118],[1211,1213],"[dispatch, isLogged, props.todolistId]",[1403,1413],"[dispatch, props.todolistId]",[1857,1859],"[dispatch]",[1968,1970],"[changeFilter, props.todolistId]",[2084,2086],[2206,2208],[1506,1508],[1580,1582],[1008,1010],"[dispatch, isLoggedIn]",[1121,1123]]