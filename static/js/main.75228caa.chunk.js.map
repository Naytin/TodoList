{"version":3,"sources":["api/task-api.ts","api/todolist-api.ts","app/app.Reducer.ts","utils/error-utils.ts","features/Todolists/todolistReducer.ts","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","features/Todolists/tasksReducer.ts","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/TodoList.tsx","features/Todolists/TotolistsList.tsx","Components/ErrorSnackBar/ErrorSnackBar.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","initialState","status","error","setAppStatusAC","type","setAppErrorAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","changeTodolistEntityStatusAC","id","entityStatus","AddItemForm","React","memo","addItem","disabled","useState","setError","setTitle","addItemHandler","trim","TextField","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","variant","className","IconButton","size","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","tasksAPI","taskId","model","changeTaskEntityStatusAC","updateTask","domainModel","getState","task","tasks","find","t","apiModel","description","priority","startDate","deadline","then","res","resultCode","action","updateTaskAC","catch","console","warn","Task","useDispatch","removeTask","useCallback","removeTaskAC","removeTaskTC","onChangeHandler","checked","Completed","New","changeTaskTitle","statusLoading","Checkbox","Delete","Todolist","props","useEffect","setTasksAC","items","addTask","item","addTaskTC","changeTodoListTitle","newTitle","changeTitleAC","changeFilter","filter","removeTodolist","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","allTodoLists","tasksForTodolist","map","todolist","Button","TodolistsList","todolists","useSelector","state","todos","addTodoList","a","todo","Error","addTodolistsTC","Grid","container","style","padding","justify","alignItems","direction","marginRight","spacing","Paper","Alert","elevation","ErrorSnackBar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","useStyles","makeStyles","theme","root","flexGrow","menuButton","App","classes","AppBar","position","Toolbar","edge","aria-label","Typography","LinearProgress","Container","fixed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","todoListId","stateCopy","forEach","tl","copyState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.75228caa.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {RequestStatusType} from \"../app/app.Reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a409a2ec-60ad-4ff6-9051-8f6025edc2fd'\r\n    }\r\n})\r\n\r\n// api\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return  instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return  instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    deleteTask(taskId: string, todolistId: string) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return  instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n// types\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a409a2ec-60ad-4ff6-9051-8f6025edc2fd'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return  instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return  instance.post<ResponseType<{item: TodolistType}>>(`todo-lists`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string, ) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return  instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType= {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\ntype ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","const initialState = {\r\n    status: 'succeeded' as RequestStatusType,\r\n    error: null as ErrorMessageType\r\n}\r\n\r\n\r\nexport const appReducer = (state: AppStateType = initialState, action: ActionsType): AppStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\n\r\n\r\n// types\r\n\r\nexport  type ErrorMessageType = string | null\r\nexport type AppStateType = typeof initialState\r\nexport type SetErrorActionType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetStatusActionType = ReturnType<typeof setAppStatusAC>;\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\ntype ActionsType = SetErrorActionType | SetStatusActionType","import {ResponseType} from '../api/task-api'\r\nimport {setAppErrorAC, setAppStatusAC, SetErrorActionType, SetStatusActionType} from '../app/app.Reducer'\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetErrorActionType | SetStatusActionType>","import {todolistAPI} from \"../../api/todolist-api\";\r\nimport {TodolistType} from \"../../api/todolist-api\"\r\nimport {\r\n    RequestStatusType,\r\n    setAppErrorAC,\r\n    setAppStatusAC,\r\n    SetErrorActionType,\r\n    SetStatusActionType\r\n} from \"../../app/app.Reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TodolistDomainType[] = []\r\n\r\nexport const todolistReducer = (state: TodolistDomainType[] = initialState, action: ActionsType): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case \"SET-TODOS\":\r\n            return action.todos.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todo, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case \"CHANGE-FILTER\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case \"CHANGE-TITLE\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setTodolistsAC = (todos: Array<TodolistType>) => ({type: 'SET-TODOS', todos}) as const\r\nexport const addTodolistAC = (todo: TodolistType) => ({type: \"ADD-TODOLIST\", todo}) as const\r\nexport const removeTodolistAC = (todolistID: string) => ({type: \"REMOVE-TODOLIST\", id: todolistID}) as const // as const - фиксирует строку как константу.\r\nexport const changeFilterAC = (filter: FilterValuesType, id: string) => ({type: \"CHANGE-FILTER\", filter, id}) as const\r\nexport const changeTitleAC = (id: string, title: string) => ({type: \"CHANGE-TITLE\", id, title}) as const\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus}) as const\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () =>\r\n    (dispatch: ThunkType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.getTodolist()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n\r\n    }\r\n\r\n\r\nexport const addTodolistsTC = (title: string) => async (dispatch: ThunkType) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        await todolistAPI.createTodolist(title)//let result =  await todolistAPI.createTodolist(title) возвращает\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = addTodolistAC(res.data.data.item)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    } catch (e) {\r\n        throw new Error(e)\r\n    }\r\n}\r\n\r\nexport const deleteTodolistsTC = (todolistId: string) =>\r\n    (dispatch: ThunkType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId,'loading'))\r\n        todolistAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if(res.data.resultCode === 0) {\r\n                    const action = removeTodolistAC(todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                }else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\nexport const updateTodolistTitleTC = (todolistId: string, title: string) =>\r\n    (dispatch: ThunkType) => {\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком\r\n// чтобы у неё отобрать остальные св-ва\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId,'loading'))\r\n        todolistAPI.updateTodolist(todolistId, title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = changeTitleAC(todolistId, title)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(changeTodolistEntityStatusAC(todolistId,'succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\n// types\r\ntype ThunkType = Dispatch<SetStatusActionType | SetErrorActionType | ActionsType>\r\n\r\nexport type AddTodolistType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeFilterAC>\r\n    | ReturnType<typeof changeTitleAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type PropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: PropsType) => {\r\n    let [error, setError] = useState<string | null>(null)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField value={title}\r\n                   disabled={disabled}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   label={title}\r\n                   helperText={error}\r\n                   variant='outlined'\r\n                   className=''\r\n        />\r\n        <IconButton size='small' color='primary' onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\nexport type PropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(({value, onChange, disabled = false}: PropsType) => {\r\n    const [editMode, setEditMode] = React.useState(false)\r\n    const [title, setTitle] = useState(value)\r\n\r\n    const activateEditMode = () => {\r\n        if(!disabled) {\r\n            setEditMode(true)\r\n            setTitle(value)\r\n        }\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(title)\r\n    }\r\n    const onChangeStatusHandler =(e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler =(e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            onChange(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField variant='outlined' value={title} onChange={onChangeStatusHandler} onKeyPress={onKeyPressHandler} autoFocus onBlur={activateViewMode}/>\r\n            :\r\n            <span onDoubleClick={activateEditMode}>{title}</span>\r\n    )\r\n})","import {tasksAPI, TaskType, UpdateTaskModelType} from \"../../api/task-api\";\r\nimport {AddTodolistType, RemoveTodolistType, SetTodolistsActionType} from \"./todolistReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC, SetErrorActionType, SetStatusActionType} from \"../../app/app.Reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case 'ADD_TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'REMOVE_TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'UPDATE_TASK':\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'CHANGE-TASK-ENTITY-STATUS':\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, entityStatus: action.entityStatus} : t)\r\n            }\r\n        case 'SET-TODOS':\r\n            const stateCopy = {...state}\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todo.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n}) as const\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD_TASK', task}) as const\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE_TASK', taskId, todolistId}) as const\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE_TASK', taskId, model, todolistId}) as const\r\nexport const changeTaskEntityStatusAC = (taskId: string, todolistId: string, entityStatus: RequestStatusType) =>\r\n    ({type: 'CHANGE-TASK-ENTITY-STATUS', taskId, todolistId, entityStatus}) as const\r\n\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) =>\r\n    (dispatch: ThunkType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        tasksAPI.getTasks(todolistId)\r\n            .then(res => {\r\n                const tasks = res.data.items\r\n                const action = setTasksAC(tasks, todolistId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) =>\r\n    (dispatch: ThunkType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'loading'))\r\n        tasksAPI.deleteTask(taskId, todolistId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = removeTaskAC(taskId, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) =>\r\n    (dispatch: ThunkType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        tasksAPI.createTask(todolistId, title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = addTaskAC(res.data.data.item)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n    }\r\n\r\n// универсальная санка, которая помимо taskId и todolistId принимает необходимое поле для изменения status|title\r\nexport const updateTask = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType) =>\r\n    (dispatch: ThunkType, getState: () => AppRootStateType) => {\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком\r\n// чтобы у неё отобрать остальные св-ва\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...domainModel// перезатираем только то свойство, которое было передано в domainModel\r\n        }\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'loading'))\r\n        tasksAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n    }\r\n\r\n// types\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n    | AddTodolistType\r\n    | SetTodolistsActionType\r\n    | RemoveTodolistType\r\n\r\ntype ThunkType = Dispatch<ActionsType | SetStatusActionType | SetErrorActionType>\r\n// создаем тип, для универсальной санки с необязательными полями, для подстановки нужного поля в санку\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n    entityStatus?: RequestStatusType\r\n}","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../Components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport { removeTaskTC, updateTask} from \"../../tasksReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/task-api\";\r\n\r\nexport type PropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nconst Task = React.memo(({todolistId, task}: PropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback(() => {\r\n        dispatch(removeTaskTC(task.id, todolistId))\r\n    },[task.id,todolistId])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTask(task.id,  todolistId, {status}));\r\n    },[task.id,todolistId])\r\n    const changeTaskTitle = useCallback((title: string) => {\r\n        dispatch(updateTask(task.id, todolistId, {title}));\r\n    },[task.id,todolistId])\r\n\r\n    const statusLoading = task.entityStatus === 'loading'\r\n    return (\r\n        <div className={task.status === TaskStatuses.Completed ? \"task__wrapper is-done\" : \"task__wrapper\"}>\r\n            <Checkbox color='primary'\r\n                      onChange={onChangeHandler}\r\n                      checked={task.status === TaskStatuses.Completed}\r\n                      disabled={statusLoading}/>\r\n            <EditableSpan value={task.title} onChange={changeTaskTitle} disabled={statusLoading}/>\r\n            <IconButton onClick={removeTask} disabled={statusLoading}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Task","import React, {useCallback, useEffect} from 'react';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {AddItemForm} from \"../../../Components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../Components/EditableSpan/EditableSpan\";\r\nimport Task from \"./Task/Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addTaskTC, fetchTasksTC} from \"../tasksReducer\";\r\nimport {\r\n    changeFilterAC,\r\n    deleteTodolistsTC,\r\n    FilterValuesType,\r\n    TodolistDomainType,\r\n    updateTodolistTitleTC\r\n} from \"../todolistReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/task-api\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    todolistId: string\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) =>  {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todolistId))\r\n    },[])//no dependencies. runs only once when the component will render\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskTC(title.trim(), props.todolistId))\r\n    },[dispatch]);\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n\r\n        dispatch(updateTodolistTitleTC(props.todolistId, newTitle))\r\n    },[dispatch, props.todolistId])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, taskId: string) => {\r\n        dispatch(changeFilterAC(value, taskId));\r\n    },[dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(deleteTodolistsTC(id))\r\n    },[])\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter(\"all\", props.todolistId)\r\n    },[]);\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter(\"active\", props.todolistId)\r\n    },[]);\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter(\"completed\", props.todolistId)\r\n    },[])\r\n\r\n\r\n    let allTodoLists = props.tasks;\r\n    let tasksForTodolist = allTodoLists\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const task =  tasksForTodolist.map(t => {\r\n        return <Task key={t.id}\r\n                     task={t}\r\n                     todolistId={props.todolistId}\r\n        />\r\n    })\r\n\r\n    const statusLoading = props.todolist.entityStatus === 'loading'\r\n\r\n    return <div>\r\n        <div className='title__wrapper'>\r\n            <EditableSpan value={props.title} onChange={changeTodoListTitle} disabled={statusLoading}/>\r\n            <IconButton onClick={() => removeTodolist(props.todolistId)} disabled={statusLoading}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n        <AddItemForm addItem={addTask} disabled={statusLoading}/>\r\n        <div>\r\n            {\r\n                task\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant='outlined' color={props.filter === 'all' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button variant='outlined' color={props.filter === 'active' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button variant='outlined' color={props.filter === 'completed' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {addTodolistsTC, fetchTodolistsTC, TodolistDomainType} from \"./todolistReducer\";\r\nimport {TaskStateType} from \"./tasksReducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../Components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/TodoList\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks);\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistsTC(title))\r\n    }, [])\r\n    return <>\r\n        <Grid container style={{padding: '20px'}} justify=\"center\" alignItems=\"center\"\r\n              direction=\"column\">\r\n            <div style={{marginRight: '20px'}}>Add new task</div>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {todolists.map(t => {\r\n                let allTodoLists = tasks[t.id];\r\n                return (\r\n                    <Grid key={t.id} item style={{padding: '20px'}}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist key={t.id}\r\n                                      todolist={t}\r\n                                      title={t.title}\r\n                                      tasks={allTodoLists}\r\n                                      filter={t.filter}\r\n                                      todolistId={t.id}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                )\r\n            })}\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {ErrorMessageType, setAppErrorAC} from \"../../app/app.Reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function ErrorSnackBar() {\r\n    const error = useSelector<AppRootStateType, ErrorMessageType>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    makeStyles,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {TodolistsList} from \"../features/Todolists/TotolistsList\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType} from \"./app.Reducer\";\r\nimport ErrorSnackBar from \"../Components/ErrorSnackBar/ErrorSnackBar\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const classes = useStyles();\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackBar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        My TODO\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color={\"primary\"}/>}\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {tasksReducer} from '../features/Todolists/tasksReducer';\r\nimport {todolistReducer} from '../features/Todolists/todolistReducer';\r\nimport {combineReducers, createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport {appReducer} from \"./app.Reducer\";\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistReducer,\r\n    app: appReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n//for redux-devtool\r\n// @ts-ignore\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\nexport const store = createStore(rootReducer,composeEnhancers(applyMiddleware(thunk)))\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент store.getSstate\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store} >\r\n        <App/>\r\n    </Provider>\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}