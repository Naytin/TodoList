[{"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\reportWebVitals.ts":"1","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\api\\API.ts":"2","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\index.tsx":"3","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\Task.stories.tsx":"4","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\todolist-api.stories.tsx":"5","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\task-api.stories.tsx":"6","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\AddItemForm\\AddItemForm.tsx":"7","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\EditableSpan\\EditableSpan.tsx":"8","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\Todolist\\Task\\Task.tsx":"9","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\tasksReducer.ts":"10","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\Todolist\\TodoList.tsx":"11","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\App.tsx":"12","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\TotolistsList.tsx":"13","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\store.ts":"14","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\todolistReducer.ts":"15","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\EditableSpan.stories.tsx":"16","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\appReducer.ts":"17","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\ErrorSnackBar\\ErrorSnackBar.tsx":"18","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\utils\\error-utils.ts":"19","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Login\\Login.tsx":"20","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Login\\authReducer.ts":"21","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\AppWithRedux.stories.tsx":"22"},{"size":440,"mtime":1618586872932,"results":"23","hashOfConfig":"24"},{"size":3072,"mtime":1623356372702,"results":"25","hashOfConfig":"24"},{"size":709,"mtime":1623347761855,"results":"26","hashOfConfig":"24"},{"size":1782,"mtime":1620486481394,"results":"27","hashOfConfig":"24"},{"size":1742,"mtime":1619026692850,"results":"28","hashOfConfig":"24"},{"size":2122,"mtime":1623358569435,"results":"29","hashOfConfig":"24"},{"size":1553,"mtime":1620478482785,"results":"30","hashOfConfig":"24"},{"size":1268,"mtime":1620478482789,"results":"31","hashOfConfig":"24"},{"size":1797,"mtime":1620486661314,"results":"32","hashOfConfig":"24"},{"size":7708,"mtime":1623355992692,"results":"33","hashOfConfig":"24"},{"size":3730,"mtime":1620486040215,"results":"34","hashOfConfig":"24"},{"size":3108,"mtime":1623358816890,"results":"35","hashOfConfig":"24"},{"size":2238,"mtime":1623357204326,"results":"36","hashOfConfig":"24"},{"size":1394,"mtime":1623354520412,"results":"37","hashOfConfig":"24"},{"size":6071,"mtime":1620492955078,"results":"38","hashOfConfig":"24"},{"size":813,"mtime":1619286510610,"results":"39","hashOfConfig":"24"},{"size":2165,"mtime":1623356548554,"results":"40","hashOfConfig":"24"},{"size":1046,"mtime":1620476421321,"results":"41","hashOfConfig":"24"},{"size":771,"mtime":1623352556817,"results":"42","hashOfConfig":"24"},{"size":3581,"mtime":1623355379226,"results":"43","hashOfConfig":"24"},{"size":1900,"mtime":1623358238620,"results":"44","hashOfConfig":"24"},{"size":522,"mtime":1619286347052,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"14moyvu",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\reportWebVitals.ts",[],["94","95"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\api\\API.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\index.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\Task.stories.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\todolist-api.stories.tsx",["96"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\task-api.stories.tsx",["97"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\AddItemForm\\AddItemForm.tsx",[],["98","99"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\EditableSpan\\EditableSpan.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\Todolist\\Task\\Task.tsx",["100","101","102"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\tasksReducer.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\Todolist\\TodoList.tsx",["103","104","105","106","107","108"],"import React, {useCallback, useEffect} from 'react';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {AddItemForm} from \"../../../Components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../Components/EditableSpan/EditableSpan\";\r\nimport Task from \"./Task/Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addTaskTC, fetchTasksTC} from \"../tasksReducer\";\r\nimport {\r\n    changeFilterAC,\r\n    deleteTodolistsTC,\r\n    FilterValuesType,\r\n    TodolistDomainType,\r\n    updateTodolistTitleTC\r\n} from \"../todolistReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/task-api\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    todolistId: string\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) =>  {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todolistId))\r\n    },[])//no dependencies. runs only once when the component will render\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskTC(title.trim(), props.todolistId))\r\n    },[dispatch]);\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n\r\n        dispatch(updateTodolistTitleTC(props.todolistId, newTitle))\r\n    },[dispatch, props.todolistId])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, taskId: string) => {\r\n        dispatch(changeFilterAC(value, taskId));\r\n    },[dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(deleteTodolistsTC(id))\r\n    },[])\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter(\"all\", props.todolistId)\r\n    },[]);\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter(\"active\", props.todolistId)\r\n    },[]);\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter(\"completed\", props.todolistId)\r\n    },[])\r\n\r\n\r\n    let allTodoLists = props.tasks;\r\n    let tasksForTodolist = allTodoLists\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const task =  tasksForTodolist.map(t => {\r\n        return <Task key={t.id}\r\n                     task={t}\r\n                     todolistId={props.todolistId}\r\n        />\r\n    })\r\n\r\n    const statusLoading = props.todolist.entityStatus === 'loading'\r\n\r\n    return <div>\r\n        <div className='title__wrapper'>\r\n            <EditableSpan value={props.title} onChange={changeTodoListTitle} disabled={statusLoading}/>\r\n            <IconButton onClick={() => removeTodolist(props.todolistId)} disabled={statusLoading}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n        <AddItemForm addItem={addTask} disabled={statusLoading}/>\r\n        <div>\r\n            {\r\n                task\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant='outlined' color={props.filter === 'all' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button variant='outlined' color={props.filter === 'active' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button variant='outlined' color={props.filter === 'completed' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\App.tsx",["109","110"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\TotolistsList.tsx",["111","112"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\store.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\todolistReducer.ts",["113"],"import {todolistAPI} from \"../../api/todolist-api\";\r\nimport {TodolistType} from \"../../api/todolist-api\"\r\nimport {\r\n    RequestStatusType,\r\n    setAppErrorAC,\r\n    setAppStatusAC,\r\n    SetErrorActionType,\r\n    SetStatusActionType\r\n} from \"../../app/app.Reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TodolistDomainType[] = []\r\n\r\nexport const todolistReducer = (state: TodolistDomainType[] = initialState, action: ActionsType): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case \"SET-TODOS\":\r\n            return action.todos.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todo, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case \"CHANGE-FILTER\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case \"CHANGE-TITLE\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setTodolistsAC = (todos: Array<TodolistType>) => ({type: 'SET-TODOS', todos}) as const\r\nexport const addTodolistAC = (todo: TodolistType) => ({type: \"ADD-TODOLIST\", todo}) as const\r\nexport const removeTodolistAC = (todolistID: string) => ({type: \"REMOVE-TODOLIST\", id: todolistID}) as const // as const - фиксирует строку как константу.\r\nexport const changeFilterAC = (filter: FilterValuesType, id: string) => ({type: \"CHANGE-FILTER\", filter, id}) as const\r\nexport const changeTitleAC = (id: string, title: string) => ({type: \"CHANGE-TITLE\", id, title}) as const\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus}) as const\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () =>\r\n    (dispatch: ThunkType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistAPI.getTodolist()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n\r\n    }\r\n\r\n\r\nexport const addTodolistsTC = (title: string) => async (dispatch: ThunkType) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        await todolistAPI.createTodolist(title)//let result =  await todolistAPI.createTodolist(title) возвращает\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = addTodolistAC(res.data.data.item)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    } catch (e) {\r\n        throw new Error(e)\r\n    }\r\n}\r\n\r\nexport const deleteTodolistsTC = (todolistId: string) =>\r\n    (dispatch: ThunkType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId,'loading'))\r\n        todolistAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if(res.data.resultCode === 0) {\r\n                    const action = removeTodolistAC(todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                }else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\nexport const updateTodolistTitleTC = (todolistId: string, title: string) =>\r\n    (dispatch: ThunkType) => {\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком\r\n// чтобы у неё отобрать остальные св-ва\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId,'loading'))\r\n        todolistAPI.updateTodolist(todolistId, title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = changeTitleAC(todolistId, title)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(changeTodolistEntityStatusAC(todolistId,'succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\n// types\r\ntype ThunkType = Dispatch<SetStatusActionType | SetErrorActionType | ActionsType>\r\n\r\nexport type AddTodolistType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeFilterAC>\r\n    | ReturnType<typeof changeTitleAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\EditableSpan.stories.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\appReducer.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\ErrorSnackBar\\ErrorSnackBar.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\utils\\error-utils.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Login\\Login.tsx",["114"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Login\\authReducer.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\AppWithRedux.stories.tsx",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":4,"column":1,"nodeType":"121","endLine":6,"endColumn":2},{"ruleId":"119","severity":1,"message":"120","line":4,"column":1,"nodeType":"121","endLine":6,"endColumn":2},{"ruleId":"115","replacedBy":"122"},{"ruleId":"117","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":19,"column":7,"nodeType":"126","endLine":19,"endColumn":27,"suggestions":"127"},{"ruleId":"124","severity":1,"message":"125","line":23,"column":7,"nodeType":"126","endLine":23,"endColumn":27,"suggestions":"128"},{"ruleId":"124","severity":1,"message":"125","line":26,"column":7,"nodeType":"126","endLine":26,"endColumn":27,"suggestions":"129"},{"ruleId":"124","severity":1,"message":"130","line":31,"column":7,"nodeType":"126","endLine":31,"endColumn":9,"suggestions":"131"},{"ruleId":"124","severity":1,"message":"132","line":35,"column":7,"nodeType":"126","endLine":35,"endColumn":17,"suggestions":"133"},{"ruleId":"124","severity":1,"message":"125","line":47,"column":7,"nodeType":"126","endLine":47,"endColumn":9,"suggestions":"134"},{"ruleId":"124","severity":1,"message":"135","line":51,"column":7,"nodeType":"126","endLine":51,"endColumn":9,"suggestions":"136"},{"ruleId":"124","severity":1,"message":"135","line":54,"column":7,"nodeType":"126","endLine":54,"endColumn":9,"suggestions":"137"},{"ruleId":"124","severity":1,"message":"135","line":57,"column":7,"nodeType":"126","endLine":57,"endColumn":9,"suggestions":"138"},{"ruleId":"124","severity":1,"message":"125","line":45,"column":7,"nodeType":"126","endLine":45,"endColumn":9,"suggestions":"139"},{"ruleId":"124","severity":1,"message":"140","line":49,"column":7,"nodeType":"126","endLine":49,"endColumn":9,"suggestions":"141"},{"ruleId":"124","severity":1,"message":"142","line":22,"column":8,"nodeType":"126","endLine":22,"endColumn":10,"suggestions":"143"},{"ruleId":"124","severity":1,"message":"125","line":26,"column":8,"nodeType":"126","endLine":26,"endColumn":10,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":5,"column":5,"nodeType":"147","messageId":"148","endLine":5,"endColumn":18},{"ruleId":"149","severity":1,"message":"150","line":54,"column":32,"nodeType":"151","endLine":54,"endColumn":49},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["152"],["153"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["154"],["155"],["156"],"React Hook useEffect has missing dependencies: 'dispatch' and 'props.todolistId'. Either include them or remove the dependency array.",["157"],"React Hook useCallback has a missing dependency: 'props.todolistId'. Either include it or remove the dependency array.",["158"],["159"],"React Hook useCallback has missing dependencies: 'changeFilter' and 'props.todolistId'. Either include them or remove the dependency array.",["160"],["161"],["162"],["163"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["164"],"React Hook useEffect has missing dependencies: 'dispatch' and 'isLoggedIn'. Either include them or remove the dependency array.",["165"],["166"],"@typescript-eslint/no-unused-vars","'setAppErrorAC' is defined but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},{"desc":"167","fix":"169"},{"desc":"167","fix":"170"},{"desc":"171","fix":"172"},{"desc":"171","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"176","fix":"178"},{"desc":"176","fix":"179"},{"desc":"174","fix":"180"},{"desc":"174","fix":"181"},{"desc":"182","fix":"183"},{"desc":"174","fix":"184"},"Update the dependencies array to be: [dispatch, task.id, todolistId]",{"range":"185","text":"186"},{"range":"187","text":"186"},{"range":"188","text":"186"},"Update the dependencies array to be: [dispatch, props.todolistId]",{"range":"189","text":"190"},{"range":"191","text":"190"},"Update the dependencies array to be: [dispatch]",{"range":"192","text":"193"},"Update the dependencies array to be: [changeFilter, props.todolistId]",{"range":"194","text":"195"},{"range":"196","text":"195"},{"range":"197","text":"195"},{"range":"198","text":"193"},{"range":"199","text":"193"},"Update the dependencies array to be: [dispatch, isLoggedIn]",{"range":"200","text":"201"},{"range":"202","text":"193"},[688,708],"[dispatch, task.id, todolistId]",[951,971],[1103,1123],[1000,1002],"[dispatch, props.todolistId]",[1192,1202],[1646,1648],"[dispatch]",[1757,1759],"[changeFilter, props.todolistId]",[1873,1875],[1995,1997],[1498,1500],[1571,1573],[1008,1010],"[dispatch, isLoggedIn]",[1121,1123]]