{"version":3,"sources":["api/task-api.ts","api/todolist-api.ts","features/Todolists/todolistReducer.ts","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","features/Todolists/tasksReducer.ts","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/TodoList.tsx","features/Todolists/TotolistsList.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","initialState","AddItemForm","React","memo","props","useState","error","setError","setTitle","addItem","trim","TextField","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","variant","className","IconButton","size","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","tasksAPI","taskId","model","updateTask","domainModel","dispatch","getState","task","tasks","find","t","id","apiModel","description","status","priority","startDate","deadline","then","res","action","type","updateTaskAC","console","warn","Task","useDispatch","removeTask","useCallback","removeTaskAC","removeTaskTC","onChangeHandler","checked","Completed","New","changeTaskTitle","Checkbox","Delete","Todolist","useEffect","setTasksAC","data","items","addTask","item","addTaskTC","changeTodoListTitle","newTitle","changeTitleAC","changeFilter","filter","removeTodolist","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","allTodoLists","tasksForTodolist","map","Button","TodolistsList","todolists","useSelector","state","todos","addTodoList","a","todo","Error","addTodolistsTC","Grid","container","style","padding","justify","alignItems","direction","marginRight","spacing","Paper","useStyles","makeStyles","theme","root","flexGrow","menuButton","App","classes","AppBar","position","Toolbar","edge","aria-label","Typography","Container","fixed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","todoListId","stateCopy","forEach","tl","copyState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.68b7b551.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a409a2ec-60ad-4ff6-9051-8f6025edc2fd'\r\n    }\r\n})\r\n\r\n// api\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return  instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return  instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    deleteTask(taskId: string, todolistId: string) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return  instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n// types\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\ntype ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a409a2ec-60ad-4ff6-9051-8f6025edc2fd'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return  instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return  instance.post<ResponseType<{item: TodolistType}>>(`todo-lists`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string, ) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return  instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType= {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\ntype ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {todolistAPI} from \"../../api/todolist-api\";\r\nimport {TodolistType} from \"../../api/todolist-api\"\r\n\r\nconst initialState: TodolistDomainType[] = []\r\n\r\nexport const todolistReducer = (state: TodolistDomainType[] = initialState, action: ActionsType): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case \"SET-TODOS\":\r\n            return action.todos.map(tl => ({...tl, filter: 'all'}))\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todo, filter: 'all'}, ...state]\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case \"CHANGE-FILTER\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case \"CHANGE-TITLE\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setTodolistsAC = (todos: Array<TodolistType>) => ({type: 'SET-TODOS', todos}) as const\r\nexport const addTodolistAC = (todo: TodolistType) => ({type: \"ADD-TODOLIST\", todo}) as const\r\nexport const removeTodolistAC = (todolistID: string) => ({type: \"REMOVE-TODOLIST\", id: todolistID}) as const // as const - фиксирует строку как константу.\r\nexport const changeFilterAC = (filter: FilterValuesType, id: string) => ({type: \"CHANGE-FILTER\", filter, id}) as const\r\nexport const changeTitleAC = (id: string, title: string) => ({type: \"CHANGE-TITLE\", id, title}) as const\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = (): ThunkType =>\r\n    (dispatch) => {\r\n        todolistAPI.getTodolist()\r\n            .then((res) => dispatch(setTodolistsAC(res.data)))\r\n    }\r\n\r\n\r\nexport const addTodolistsTC = (title: string): ThunkType => async dispatch => {\r\n    try {\r\n        const res = await todolistAPI.createTodolist(title)\r\n        const action = addTodolistAC(res.data.data.item)\r\n        dispatch(action)\r\n    } catch (e) {\r\n        throw new Error(e)\r\n    }\r\n}\r\n\r\nexport const deleteTodolistsTC = (todolistId: string): ThunkType =>\r\n    (dispatch) => {\r\n        todolistAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                const action = removeTodolistAC(todolistId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n\r\nexport const updateTodolistTitleTC = (todolistId: string, title: string): ThunkType =>\r\n    (dispatch) => {\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком\r\n// чтобы у неё отобрать остальные св-ва\r\n        todolistAPI.updateTodolist(todolistId, title).then(res => {\r\n            const action = changeTitleAC(todolistId, title)\r\n            dispatch(action)\r\n        })\r\n    }\r\n\r\n// types\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsType>\r\n\r\nexport type AddTodolistType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeFilterAC>\r\n    | ReturnType<typeof changeTitleAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type PropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: PropsType) => {\r\n    let [error, setError] = useState<string | null>(null)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   label={title}\r\n                   helperText={error}\r\n                   variant='outlined'\r\n                   className=''\r\n        />\r\n        <IconButton size='small' color='primary' onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\nexport type PropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: PropsType) => {\r\n    const [editMode, setEditMode] = React.useState(false)\r\n    const [title, setTitle] = useState(props.value)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeStatusHandler =(e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler =(e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            props.onChange(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField variant='outlined' value={title} onChange={onChangeStatusHandler} onKeyPress={onKeyPressHandler} autoFocus onBlur={activateViewMode}/>\r\n            :\r\n            <span onDoubleClick={activateEditMode}>{title}</span>\r\n    )\r\n})","import {tasksAPI, TaskType, UpdateTaskModelType} from \"../../api/task-api\";\r\nimport {AddTodolistType, RemoveTodolistType, SetTodolistsActionType} from \"./todolistReducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case 'ADD_TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'REMOVE_TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'UPDATE_TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model}: t)}\r\n        case 'SET-TODOS':\r\n            const stateCopy = {...state}\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []})\r\n            return stateCopy;\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todo.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n}) as const\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD_TASK', task}) as const\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE_TASK', taskId, todolistId}) as const\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE_TASK', taskId, model, todolistId}) as const\r\n\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string): ThunkType =>\r\n    (dispatch) => {\r\n    tasksAPI.getTasks(todolistId)\r\n        .then(res => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string): ThunkType =>\r\n    (dispatch) => {\r\n    tasksAPI.deleteTask(taskId, todolistId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string): ThunkType =>\r\n    (dispatch) => {\r\n    tasksAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            const action = addTaskAC(res.data.data.item)\r\n            dispatch(action)\r\n        })\r\n}\r\n\r\n// универсальная санка, которая помимо taskId и todolistId принимает необходимое поле для изменения status|title\r\nexport const updateTask = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType): ThunkType =>\r\n    (dispatch, getState: () => AppRootStateType) => {\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком\r\n// чтобы у неё отобрать остальные св-ва\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...domainModel// перезатираем только то свойство, которое было передано в domainModel\r\n        }\r\n        tasksAPI.updateTask(todolistId, taskId, apiModel).then(res => {\r\n            const action = updateTaskAC(taskId, domainModel, todolistId)\r\n            dispatch(action)\r\n        })\r\n\r\n    }\r\n\r\n// types\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistType\r\n    | SetTodolistsActionType\r\n    | RemoveTodolistType\r\n\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsType>\r\n// создаем тип, для универсальной санки с необязательными полями, для подстановки нужного поля в санку\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../Components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport { removeTaskTC, updateTask} from \"../../tasksReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/task-api\";\r\n\r\nexport type PropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nconst Task = React.memo(({todolistId, task}: PropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback(() => {\r\n        dispatch(removeTaskTC(task.id, todolistId))\r\n    },[task.id,todolistId])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTask(task.id,  todolistId, {status}));\r\n    },[task.id,todolistId])\r\n    const changeTaskTitle = useCallback((title: string) => {\r\n        dispatch(updateTask(task.id, todolistId, {title}));\r\n    },[task.id,todolistId])\r\n\r\n\r\n    return (\r\n        <div className={task.status === TaskStatuses.Completed ? \"task__wrapper is-done\" : \"task__wrapper\"}>\r\n            <Checkbox color='primary'  onChange={onChangeHandler} checked={task.status === TaskStatuses.Completed}/>\r\n            <EditableSpan value={task.title} onChange={changeTaskTitle}/>\r\n            <IconButton onClick={removeTask}><Delete/></IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Task","import React, {useCallback, useEffect} from 'react';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {AddItemForm} from \"../../../Components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../Components/EditableSpan/EditableSpan\";\r\nimport Task from \"./Task/Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addTaskTC, fetchTasksTC} from \"../tasksReducer\";\r\nimport {changeFilterAC, deleteTodolistsTC, FilterValuesType, updateTodolistTitleTC} from \"../todolistReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/task-api\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    todolistId: string\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) =>  {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todolistId))\r\n    },[])//no dependencies. runs only once when the component will render\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskTC(title.trim(), props.todolistId))\r\n    },[dispatch]);\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n\r\n        dispatch(updateTodolistTitleTC(props.todolistId, newTitle))\r\n    },[dispatch, props.todolistId])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, taskId: string) => {\r\n        dispatch(changeFilterAC(value, taskId));\r\n    },[dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(deleteTodolistsTC(id))\r\n    },[])\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter(\"all\", props.todolistId)\r\n    },[]);\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter(\"active\", props.todolistId)\r\n    },[]);\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter(\"completed\", props.todolistId)\r\n    },[])\r\n\r\n\r\n    let allTodoLists = props.tasks;\r\n    let tasksForTodolist = allTodoLists\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const task =  tasksForTodolist.map(t => {\r\n        return <Task key={t.id}\r\n                     task={t}\r\n                     todolistId={props.todolistId}\r\n        />\r\n    })\r\n\r\n    return <div>\r\n        <div className='title__wrapper'>\r\n            <EditableSpan value={props.title} onChange={changeTodoListTitle}/>\r\n            <IconButton onClick={() => removeTodolist(props.todolistId)}><Delete/></IconButton>\r\n        </div>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                task\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant='outlined' color={props.filter === 'all' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button variant='outlined' color={props.filter === 'active' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button variant='outlined' color={props.filter === 'completed' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {addTodolistsTC, fetchTodolistsTC, TodolistDomainType} from \"./todolistReducer\";\r\nimport {TaskStateType} from \"./tasksReducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../Components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/TodoList\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks);\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistsTC(title))\r\n    }, [])\r\n    return <>\r\n        <Grid container style={{padding: '20px'}} justify=\"center\" alignItems=\"center\"\r\n              direction=\"column\">\r\n            <div style={{marginRight: '20px'}}>Add new task</div>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {todolists.map(t => {\r\n                let allTodoLists = tasks[t.id];\r\n                return (\r\n                    <Grid key={t.id} item style={{padding: '20px'}}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist key={t.id}\r\n                                      title={t.title}\r\n                                      tasks={allTodoLists}\r\n                                      filter={t.filter}\r\n                                      todolistId={t.id}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                )\r\n            })}\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport './App.scss';\r\nimport {AppBar, Button, Container, IconButton, makeStyles, Toolbar, Typography} from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {TodolistsList} from \"../features/Todolists/TotolistsList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        My TODO\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {tasksReducer} from '../features/Todolists/tasksReducer';\r\nimport {todolistReducer} from '../features/Todolists/todolistReducer';\r\nimport {combineReducers, createStore, applyMiddleware} from 'redux';\r\nimport thunk, {ThunkAction} from 'redux-thunk'\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n//for redux-devtool\r\n// @ts-ignore\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\nexport const store = createStore(rootReducer,composeEnhancers(applyMiddleware(thunk)))\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент store.getSstate\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store} >\r\n        <App/>\r\n    </Provider>\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}